// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: hotel.proto

package hotelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/hotel.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hotel.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel.proto",
}

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	SearchHotels(ctx context.Context, in *SearchHotelsRequest, opts ...grpc.CallOption) (*SearchHotelsResponse, error)
	StoreHotel(ctx context.Context, in *StoreHotelRequest, opts ...grpc.CallOption) (*StoreHotelResponse, error)
	FrontendReservation(ctx context.Context, in *FrontendReservationRequest, opts ...grpc.CallOption) (*FrontendReservationResponse, error)
	Nearby(ctx context.Context, in *NearbyRequest, opts ...grpc.CallOption) (*NearbyResponse, error)
	StoreHotelLocation(ctx context.Context, in *StoreHotelLocationRequest, opts ...grpc.CallOption) (*StoreHotelLocationResponse, error)
	GetRates(ctx context.Context, in *GetRatesRequest, opts ...grpc.CallOption) (*GetRatesResponse, error)
	StoreRate(ctx context.Context, in *StoreRateRequest, opts ...grpc.CallOption) (*StoreRateResponse, error)
	GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesResponse, error)
	StoreProfile(ctx context.Context, in *StoreProfileRequest, opts ...grpc.CallOption) (*StoreProfileResponse, error)
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
	MakeReservation(ctx context.Context, in *MakeReservationRequest, opts ...grpc.CallOption) (*MakeReservationResponse, error)
	AddHotelAvailability(ctx context.Context, in *AddHotelAvailabilityRequest, opts ...grpc.CallOption) (*AddHotelAvailabilityResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) SearchHotels(ctx context.Context, in *SearchHotelsRequest, opts ...grpc.CallOption) (*SearchHotelsResponse, error) {
	out := new(SearchHotelsResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/SearchHotels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) StoreHotel(ctx context.Context, in *StoreHotelRequest, opts ...grpc.CallOption) (*StoreHotelResponse, error) {
	out := new(StoreHotelResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/StoreHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) FrontendReservation(ctx context.Context, in *FrontendReservationRequest, opts ...grpc.CallOption) (*FrontendReservationResponse, error) {
	out := new(FrontendReservationResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/FrontendReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) Nearby(ctx context.Context, in *NearbyRequest, opts ...grpc.CallOption) (*NearbyResponse, error) {
	out := new(NearbyResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/Nearby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) StoreHotelLocation(ctx context.Context, in *StoreHotelLocationRequest, opts ...grpc.CallOption) (*StoreHotelLocationResponse, error) {
	out := new(StoreHotelLocationResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/StoreHotelLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetRates(ctx context.Context, in *GetRatesRequest, opts ...grpc.CallOption) (*GetRatesResponse, error) {
	out := new(GetRatesResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/GetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) StoreRate(ctx context.Context, in *StoreRateRequest, opts ...grpc.CallOption) (*StoreRateResponse, error) {
	out := new(StoreRateResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/StoreRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesResponse, error) {
	out := new(GetProfilesResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) StoreProfile(ctx context.Context, in *StoreProfileRequest, opts ...grpc.CallOption) (*StoreProfileResponse, error) {
	out := new(StoreProfileResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/StoreProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/CheckAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) MakeReservation(ctx context.Context, in *MakeReservationRequest, opts ...grpc.CallOption) (*MakeReservationResponse, error) {
	out := new(MakeReservationResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/MakeReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) AddHotelAvailability(ctx context.Context, in *AddHotelAvailabilityRequest, opts ...grpc.CallOption) (*AddHotelAvailabilityResponse, error) {
	out := new(AddHotelAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/AddHotelAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/hotel.HotelService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	SearchHotels(context.Context, *SearchHotelsRequest) (*SearchHotelsResponse, error)
	StoreHotel(context.Context, *StoreHotelRequest) (*StoreHotelResponse, error)
	FrontendReservation(context.Context, *FrontendReservationRequest) (*FrontendReservationResponse, error)
	Nearby(context.Context, *NearbyRequest) (*NearbyResponse, error)
	StoreHotelLocation(context.Context, *StoreHotelLocationRequest) (*StoreHotelLocationResponse, error)
	GetRates(context.Context, *GetRatesRequest) (*GetRatesResponse, error)
	StoreRate(context.Context, *StoreRateRequest) (*StoreRateResponse, error)
	GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesResponse, error)
	StoreProfile(context.Context, *StoreProfileRequest) (*StoreProfileResponse, error)
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	MakeReservation(context.Context, *MakeReservationRequest) (*MakeReservationResponse, error)
	AddHotelAvailability(context.Context, *AddHotelAvailabilityRequest) (*AddHotelAvailabilityResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) SearchHotels(context.Context, *SearchHotelsRequest) (*SearchHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHotels not implemented")
}
func (UnimplementedHotelServiceServer) StoreHotel(context.Context, *StoreHotelRequest) (*StoreHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHotel not implemented")
}
func (UnimplementedHotelServiceServer) FrontendReservation(context.Context, *FrontendReservationRequest) (*FrontendReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendReservation not implemented")
}
func (UnimplementedHotelServiceServer) Nearby(context.Context, *NearbyRequest) (*NearbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nearby not implemented")
}
func (UnimplementedHotelServiceServer) StoreHotelLocation(context.Context, *StoreHotelLocationRequest) (*StoreHotelLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHotelLocation not implemented")
}
func (UnimplementedHotelServiceServer) GetRates(context.Context, *GetRatesRequest) (*GetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedHotelServiceServer) StoreRate(context.Context, *StoreRateRequest) (*StoreRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRate not implemented")
}
func (UnimplementedHotelServiceServer) GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}
func (UnimplementedHotelServiceServer) StoreProfile(context.Context, *StoreProfileRequest) (*StoreProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreProfile not implemented")
}
func (UnimplementedHotelServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedHotelServiceServer) MakeReservation(context.Context, *MakeReservationRequest) (*MakeReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeReservation not implemented")
}
func (UnimplementedHotelServiceServer) AddHotelAvailability(context.Context, *AddHotelAvailabilityRequest) (*AddHotelAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotelAvailability not implemented")
}
func (UnimplementedHotelServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedHotelServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_SearchHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).SearchHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/SearchHotels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).SearchHotels(ctx, req.(*SearchHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_StoreHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).StoreHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/StoreHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).StoreHotel(ctx, req.(*StoreHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_FrontendReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).FrontendReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/FrontendReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).FrontendReservation(ctx, req.(*FrontendReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_Nearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Nearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/Nearby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Nearby(ctx, req.(*NearbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_StoreHotelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHotelLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).StoreHotelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/StoreHotelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).StoreHotelLocation(ctx, req.(*StoreHotelLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/GetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetRates(ctx, req.(*GetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_StoreRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).StoreRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/StoreRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).StoreRate(ctx, req.(*StoreRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).GetProfiles(ctx, req.(*GetProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_StoreProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).StoreProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/StoreProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).StoreProfile(ctx, req.(*StoreProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/CheckAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_MakeReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).MakeReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/MakeReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).MakeReservation(ctx, req.(*MakeReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_AddHotelAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotelAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).AddHotelAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/AddHotelAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).AddHotelAvailability(ctx, req.(*AddHotelAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel.HotelService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hotel.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchHotels",
			Handler:    _HotelService_SearchHotels_Handler,
		},
		{
			MethodName: "StoreHotel",
			Handler:    _HotelService_StoreHotel_Handler,
		},
		{
			MethodName: "FrontendReservation",
			Handler:    _HotelService_FrontendReservation_Handler,
		},
		{
			MethodName: "Nearby",
			Handler:    _HotelService_Nearby_Handler,
		},
		{
			MethodName: "StoreHotelLocation",
			Handler:    _HotelService_StoreHotelLocation_Handler,
		},
		{
			MethodName: "GetRates",
			Handler:    _HotelService_GetRates_Handler,
		},
		{
			MethodName: "StoreRate",
			Handler:    _HotelService_StoreRate_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _HotelService_GetProfiles_Handler,
		},
		{
			MethodName: "StoreProfile",
			Handler:    _HotelService_StoreProfile_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _HotelService_CheckAvailability_Handler,
		},
		{
			MethodName: "MakeReservation",
			Handler:    _HotelService_MakeReservation_Handler,
		},
		{
			MethodName: "AddHotelAvailability",
			Handler:    _HotelService_AddHotelAvailability_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _HotelService_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HotelService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel.proto",
}
